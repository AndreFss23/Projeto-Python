import tkinter as tk
import psycopg2

class PrincipalBD:
    def __init__(self, win):
        self.objBD = CrudOperations()
        self.lbCodigo = tk.Label(win, text='Código do Produto:')
        self.lblNome = tk.Label(win, text='Nome do Produto')
        self.lblPreco = tk.Label(win, text='Preço')
        self.txtCodigo = tk.Entry(win, bd=3)
        self.txtNome = tk.Entry(win)
        self.txtPreco = tk.Entry(win)
        self.btnCadastrar = tk.Button(win, text='Cadastrar', command=self.fCadastrarProduto)
        self.btnAtualizar = tk.Button(win, text='Atualizar', command=self.fAtualizarProduto)
        self.btnExcluir = tk.Button(win, text='Excluir', command=self.fExcluirProduto)
        self.btnLimpar = tk.Button(win, text='Limpar', command=self.fLimparTela)
        
        self.lbCodigo.place(x=100, y=50)
        self.txtCodigo.place(x=250, y=50)
        self.lblNome.place(x=100, y=100)
        self.txtNome.place(x=250, y=100)
        self.lblPreco.place(x=100, y=150)
        self.txtPreco.place(x=250, y=150)
        self.btnCadastrar.place(x=100, y=200)
        self.btnAtualizar.place(x=200, y=200)
        self.btnExcluir.place(x=300, y=200)
        self.btnLimpar.place(x=400, y=200)

    def fCadastrarProduto(self):
        try:
            codigo, nome, preco = self.fLerCampos()
            self.objBD.inserirDados(codigo, nome, preco)
            self.fLimparTela()
            print('Produto Cadastrado com Sucesso!')
        except Exception as e:
            print(f'Não foi possível fazer o cadastro. Erro: {e}')

    def fAtualizarProduto(self):
        try:
            codigo, nome, preco = self.fLerCampos()
            self.objBD.atualizarDados(codigo, nome, preco)
            self.fLimparTela()
            print('Produto Atualizado com Sucesso!')
        except Exception as e:
            print(f'Não foi possível fazer a atualização. Erro: {e}')

    def fExcluirProduto(self):
        try:
            codigo, _, _ = self.fLerCampos()  # Apenas o código é necessário para excluir
            self.objBD.excluirDados(codigo)
            self.fLimparTela()
            print('Produto Excluído com Sucesso!')
        except Exception as e:
            print(f'Não foi possível fazer a exclusão. Erro: {e}')

    def fLimparTela(self):
        try:
            self.txtCodigo.delete(0, tk.END)
            self.txtNome.delete(0, tk.END)
            self.txtPreco.delete(0, tk.END)
            print('Campos Limpos!')
        except:
            print('Não foi possível limpar os campos.')

    def fLerCampos(self):
        codigo = self.txtCodigo.get()
        nome = self.txtNome.get()
        preco = self.txtPreco.get()
        return codigo, nome, preco

class CrudOperations:
    def __init__(self):
        self.connection = psycopg2.connect(
            database="postgres",
            user="postgres",
            password="1234",
            host="127.0.0.1",
            port="5432"
        )

    def inserirDados(self, codigo, nome, preco):
        try:
            cursor = self.connection.cursor()
            postgres_insert_query = """ INSERT INTO public."PRODUTO"
            ("CODIGO", "NOME", "PRECO") VALUES (%s,%s,%s)"""
            record_to_insert = (codigo, nome, preco)
            cursor.execute(postgres_insert_query, record_to_insert)
            self.connection.commit()
            count = cursor.rowcount
            print(count, "Registro inserido com sucesso na tabela PRODUTO")
        except (Exception, psycopg2.Error) as error:
            print("Falha ao inserir registro na tabela PRODUTO", error)
        finally:
            # Fechando a conexão com o banco de dados.
            if self.connection:
                cursor.close()
                # self.connection.close()  # Este fechamento foi removido para evitar erros na execução
                print("A conexão com o PostgreSQL foi fechada.")

    def atualizarDados(self, codigo, nome, preco):
        try:
            cursor = self.connection.cursor()
            sql_update_query = """UPDATE public."PRODUTO" SET "NOME" = %s,
                "PRECO" = %s WHERE "CODIGO" = %s"""
            cursor.execute(sql_update_query, (nome, preco, codigo))
            self.connection.commit()
            count = cursor.rowcount
            print(count, "Registro atualizado com sucesso! ")
            print("Registro Depois da Atualização ")
            sql_select_query = """SELECT * FROM public."PRODUTO"
                WHERE "CODIGO" = %s"""
            cursor.execute(sql_select_query, (codigo,))
            record = cursor.fetchone()
            print(record)
        except (Exception, psycopg2.Error) as error:
            print("Erro na Atualização", error)
        finally:
            if self.connection:
                cursor.close()
                # self.connection.close()  # Este fechamento foi removido para evitar erros na execução
                print("A conexão com o PostgreSQL foi fechada.")

    def excluirDados(self, codigo):
        try:
            cursor = self.connection.cursor()
            sql_delete_query = """DELETE FROM public."PRODUTO"
                WHERE "CODIGO" = %s"""
            cursor.execute(sql_delete_query, (codigo, ))
            self.connection.commit()
            count = cursor.rowcount
            print(count, "Registro excluído com sucesso! ")
        except (Exception, psycopg2.Error) as error:
            print("Erro na Exclusão", error)
        finally:
            if self.connection:
                cursor.close()
                # self.connection.close()  # Este fechamento foi removido para evitar erros na execução
                print("A conexão com o PostgreSQL foi fechada.")

# Programa Principal
janela = tk.Tk()
principal = PrincipalBD(janela)
janela.title('Bem Vindo a Tela de Cadastro')
janela.geometry("600x500")
janela.mainloop()
